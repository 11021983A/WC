#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –ø—Ä–æ–±–ª–µ–º
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã: Telegram, Google Sheets, QR-–∫–æ–¥—ã
"""

import os
import requests
import json
from datetime import datetime
from dotenv import load_dotenv

load_dotenv()

def test_telegram():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Telegram –±–æ—Ç–∞...")
    
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    chat_id = os.getenv('TELEGRAM_CHAT_ID')
    
    if not token or not chat_id:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID")
        return False
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
        url = f"https://api.telegram.org/bot{token}/getMe"
        response = requests.get(url, timeout=10)
        bot_info = response.json()
        
        if not bot_info.get('ok'):
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {bot_info.get('description')}")
            return False
        
        bot_data = bot_info['result']
        print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{bot_data['username']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üß™ <b>–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –ø—Ä–æ–±–ª–µ–º</b>

üìç <b>–ü–æ–º–µ—â–µ–Ω–∏–µ:</b> –ö–æ—Ä–ø—É—Å A, 02 —ç—Ç–∞–∂, WC ‚Ññ001
üîß <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> üßº –ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –º—ã–ª–æ
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã
üìÖ <b>–î–∞—Ç–∞:</b> {datetime.now().strftime('%d.%m.%Y')}
üïê <b>–í—Ä–µ–º—è:</b> {datetime.now().strftime('%H:%M:%S')}

#—Ç–µ—Å—Ç #–ø–æ–º–µ—â–µ–Ω–∏–µ001
        """.strip()
        
        url = f"https://api.telegram.org/bot{token}/sendMessage"
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, data=data, timeout=10)
        result = response.json()
        
        if result.get('ok'):
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {result.get('description')}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Telegram: {e}")
        return False

def test_google_sheets():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Google Sheets...")
    
    credentials_file = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
    sheet_id = os.getenv('GOOGLE_SHEET_ID')
    
    if not os.path.exists(credentials_file):
        print(f"‚ùå –§–∞–π–ª {credentials_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    if not sheet_id:
        print("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω GOOGLE_SHEET_ID")
        return False
    
    try:
        from google.oauth2.service_account import Credentials
        import gspread
        
        scope = ['https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive']
        
        creds = Credentials.from_service_account_file(credentials_file, scopes=scope)
        client = gspread.authorize(creds)
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        sheet = client.open_by_key(sheet_id)
        worksheet = sheet.sheet1
        
        print(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ç–∞–±–ª–∏—Ü–µ: {sheet.title}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
        test_row = [
            datetime.now().strftime('%d.%m.%Y'),
            datetime.now().strftime('%H:%M:%S'),
            'A',
            '02',
            'WC',
            '001',
            'üßº –ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –º—ã–ª–æ',
            '–¢–µ—Å—Ç–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã',
            '–¢–µ—Å—Ç'
        ]
        
        worksheet.insert_row(test_row, 2)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Google Sheets")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Google Sheets: {e}")
        return False

def test_qr_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤"""
    print("\nüîó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤...")
    
    try:
        import qrcode
        from io import BytesIO
        import base64
        
        base_url = os.getenv('BASE_URL', 'https://example.com')
        room_number = 1
        url = f"{base_url}/room/{room_number}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(url)
        qr.make(fit=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = qr.make_image(fill_color="black", back_color="white")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ QR-–∫–æ–¥–∞
        img.save('test_qr.png')
        print(f"‚úÖ QR-–∫–æ–¥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è URL: {url}")
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π QR-–∫–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ test_qr.png")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–∞: {e}")
        return False

def test_flask_app():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        response = requests.get('http://localhost:5000', timeout=5)
        
        if response.status_code == 200:
            print("‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ http://localhost:5000")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR
            qr_response = requests.get('http://localhost:5000/api/generate_qr/1', timeout=5)
            if qr_response.status_code == 200:
                print("‚úÖ API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ö†Ô∏è API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            
            return True
        else:
            print(f"‚ùå Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–∫–æ–¥: {response.status_code})")
            return False
            
    except requests.ConnectionError:
        print("‚ùå Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π: python app.py")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Flask: {e}")
        return False

def main():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –ø—Ä–æ–±–ª–µ–º –≤ –ø–æ–º–µ—â–µ–Ω–∏—è—Ö")
    print("=" * 60)
    
    results = []
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    results.append(("Telegram Bot", test_telegram()))
    results.append(("Google Sheets", test_google_sheets()))
    results.append(("QR Generation", test_qr_generation()))
    results.append(("Flask App", test_flask_app()))
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("=" * 60)
    
    all_passed = True
    for component, passed in results:
        status = "‚úÖ –†–ê–ë–û–¢–ê–ï–¢" if passed else "‚ùå –ù–ï –†–ê–ë–û–¢–ê–ï–¢"
        print(f"{component:20} {status}")
        if not passed:
            all_passed = False
    
    print("=" * 60)
    
    if all_passed:
        print("üéâ –í—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print("\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥—ã: http://localhost:5000/admin/qr_codes")
        print("2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–∫–∏: http://localhost:5000/room/1")
        print("3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram –≥—Ä—É–ø–ø—É –∏ Google Sheets")
    else:
        print("‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
        print("\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env")
        print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    if os.path.exists('test_qr.png'):
        os.remove('test_qr.png')
        print("\nüßπ –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —É–¥–∞–ª–µ–Ω—ã")

if __name__ == "__main__":
    main()