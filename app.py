from flask import Flask, render_template, request, jsonify, redirect, url_for
import os
import json
import requests
from datetime import datetime
import logging
from google.oauth2.service_account import Credentials
import gspread
import qrcode
from io import BytesIO
import base64
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
class Config:
    TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
    TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')
    GOOGLE_CREDENTIALS_FILE = os.getenv('GOOGLE_CREDENTIALS_FILE', 'credentials.json')
    GOOGLE_SHEET_ID = os.getenv('GOOGLE_SHEET_ID')
    BASE_URL = os.getenv('BASE_URL', 'https://example.com')
    
    # –¢–∏–ø—ã –ø—Ä–æ–±–ª–µ–º
    PROBLEM_TYPES = {
        'soap': 'üßº –ó–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –º—ã–ª–æ',
        'paper': 'üßª –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±—É–º–∞–∂–Ω—ã–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏',
        'trash': 'üóëÔ∏è –í—ã–Ω–µ—Å—Ç–∏ –º—É—Å–æ—Ä',
        'cleaning': 'üßΩ –ü—Ä–∏–±—Ä–∞—Ç—å—Å—è',
        'plumbing': 'üö∞ –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∞–Ω—Ç–µ—Ö–Ω–∏–∫–æ–π',
        'electricity': 'üí° –ü—Ä–æ–±–ª–µ–º—ã —Å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ–º',
        'heating': 'üî• –ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ç–æ–ø–ª–µ–Ω–∏–µ–º',
        'other': 'üìù –î—Ä—É–≥–∞—è –ø—Ä–æ–±–ª–µ–º–∞'
    }
    
    # –¢–∏–ø—ã –ø–æ–º–µ—â–µ–Ω–∏–π
    ROOM_TYPES = {
        'WC': '–¢—É–∞–ª–µ—Ç',
        'KITCHEN': '–ö—É—Ö–Ω—è',
        'OFFICE': '–û—Ñ–∏—Å',
        'MEETING': '–ü–µ—Ä–µ–≥–æ–≤–æ—Ä–Ω–∞—è',
        'STORAGE': '–°–∫–ª–∞–¥',
        'CORRIDOR': '–ö–æ—Ä–∏–¥–æ—Ä',
        'LOBBY': '–•–æ–ª–ª'
    }

config = Config()

class TelegramBot:
    def __init__(self, token, chat_id):
        self.token = token
        self.chat_id = chat_id
        self.base_url = f"https://api.telegram.org/bot{token}"
    
    def send_message(self, message):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.token or not self.chat_id:
            logger.warning("Telegram credentials not configured")
            return False
            
        url = f"{self.base_url}/sendMessage"
        data = {
            'chat_id': self.chat_id,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        try:
            response = requests.post(url, data=data, timeout=10)
            response.raise_for_status()
            logger.info("Message sent to Telegram successfully")
            return True
        except requests.RequestException as e:
            logger.error(f"Failed to send Telegram message: {e}")
            return False

class GoogleSheetsIntegration:
    def __init__(self, credentials_file, sheet_id):
        self.credentials_file = credentials_file
        self.sheet_id = sheet_id
        self.client = None
        self.worksheet = None
        self._initialize()
    
    def _initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets API"""
        try:
            if os.path.exists(self.credentials_file):
                scope = ['https://spreadsheets.google.com/feeds',
                        'https://www.googleapis.com/auth/drive']
                
                creds = Credentials.from_service_account_file(
                    self.credentials_file, scopes=scope)
                self.client = gspread.authorize(creds)
                
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
                sheet = self.client.open_by_key(self.sheet_id)
                self.worksheet = sheet.sheet1
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                self._setup_headers()
                logger.info("Google Sheets initialized successfully")
            else:
                logger.warning(f"Google credentials file not found: {self.credentials_file}")
        except Exception as e:
            logger.error(f"Failed to initialize Google Sheets: {e}")
    
    def _setup_headers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ç–∞–±–ª–∏—Ü—ã"""
        headers = ['–î–∞—Ç–∞', '–í—Ä–µ–º—è', '–ö–æ—Ä–ø—É—Å', '–≠—Ç–∞–∂', '–¢–∏–ø –ø–æ–º–µ—â–µ–Ω–∏—è', 
                  '–ù–æ–º–µ—Ä', '–ü—Ä–æ–±–ª–µ–º–∞', '–û–ø–∏—Å–∞–Ω–∏–µ', '–°—Ç–∞—Ç—É—Å']
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
            existing_headers = self.worksheet.row_values(1)
            if not existing_headers:
                self.worksheet.insert_row(headers, 1)
        except Exception as e:
            logger.error(f"Failed to setup headers: {e}")
    
    def add_request(self, request_data):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É"""
        if not self.worksheet:
            logger.warning("Google Sheets not initialized")
            return False
            
        try:
            row = [
                request_data['date'],
                request_data['time'],
                request_data['room']['building'],
                request_data['room']['floor'],
                request_data['room']['type'],
                request_data['room']['number'],
                request_data['problem_type'],
                request_data['description'],
                '–ù–æ–≤–∞—è'
            ]
            
            self.worksheet.insert_row(row, 2)  # –í—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            logger.info("Request added to Google Sheets successfully")
            return True
        except Exception as e:
            logger.error(f"Failed to add request to Google Sheets: {e}")
            return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π
telegram_bot = TelegramBot(config.TELEGRAM_BOT_TOKEN, config.TELEGRAM_CHAT_ID)
google_sheets = GoogleSheetsIntegration(config.GOOGLE_CREDENTIALS_FILE, config.GOOGLE_SHEET_ID)

@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('index.html', 
                         problem_types=config.PROBLEM_TYPES,
                         room_types=config.ROOM_TYPES)

@app.route('/room/<int:room_number>')
def room_form(room_number):
    """–§–æ—Ä–º–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–º–µ—â–µ–Ω–∏—è"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–º–µ—â–µ–Ω–∏–∏ –∏–∑ –ë–î
    room_data = {
        'building': 'A',
        'floor': '02',
        'type': 'WC',
        'number': str(room_number).zfill(3),
        'name': config.ROOM_TYPES.get('WC', '–ü–æ–º–µ—â–µ–Ω–∏–µ')
    }
    
    return render_template('room_form.html', 
                         room=room_data,
                         problem_types=config.PROBLEM_TYPES)

@app.route('/api/submit_request', methods=['POST'])
def submit_request():
    """API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏"""
    try:
        data = request.get_json()
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['room', 'problem_type']
        for field in required_fields:
            if field not in data:
                return jsonify({'error': f'Missing field: {field}'}), 400
        
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–∫–∏
        now = datetime.now()
        request_data = {
            'room': data['room'],
            'problem_type': config.PROBLEM_TYPES.get(data['problem_type'], data['problem_type']),
            'description': data.get('description', ''),
            'date': now.strftime('%d.%m.%Y'),
            'time': now.strftime('%H:%M:%S'),
            'timestamp': now.isoformat()
        }
        
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Telegram
        room = request_data['room']
        telegram_message = f"""
üö® <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</b>

üìç <b>–ü–æ–º–µ—â–µ–Ω–∏–µ:</b> –ö–æ—Ä–ø—É—Å {room['building']}, {room['floor']} —ç—Ç–∞–∂, {room['type']} ‚Ññ{room['number']}
üîß <b>–ü—Ä–æ–±–ª–µ–º–∞:</b> {request_data['problem_type']}
üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {request_data['description'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üìÖ <b>–î–∞—Ç–∞:</b> {request_data['date']}
üïê <b>–í—Ä–µ–º—è:</b> {request_data['time']}

#–∑–∞—è–≤–∫–∞ #–ø–æ–º–µ—â–µ–Ω–∏–µ{room['number']}
        """.strip()
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram –∏ Google Sheets
        telegram_success = telegram_bot.send_message(telegram_message)
        sheets_success = google_sheets.add_request(request_data)
        
        if telegram_success or sheets_success:
            return jsonify({
                'success': True,
                'message': '–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!',
                'telegram_sent': telegram_success,
                'sheets_saved': sheets_success
            })
        else:
            return jsonify({
                'success': False,
                'message': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏'
            }), 500
        
    except Exception as e:
        logger.error(f"Error submitting request: {e}")
        return jsonify({'error': 'Internal server error'}), 500

@app.route('/api/generate_qr/<int:room_number>')
def generate_qr(room_number):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è QR-–∫–æ–¥–∞ –¥–ª—è –ø–æ–º–µ—â–µ–Ω–∏—è"""
    try:
        url = f"{config.BASE_URL}/room/{room_number}"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ QR-–∫–æ–¥–∞
        qr = qrcode.QRCode(
            version=1,
            error_correction=qrcode.constants.ERROR_CORRECT_L,
            box_size=10,
            border=4,
        )
        qr.add_data(url)
        qr.make(fit=True)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = qr.make_image(fill_color="black", back_color="white")
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ base64
        buffer = BytesIO()
        img.save(buffer, format='PNG')
        img_str = base64.b64encode(buffer.getvalue()).decode()
        
        return jsonify({
            'success': True,
            'qr_code': f"data:image/png;base64,{img_str}",
            'url': url,
            'room_number': room_number
        })
        
    except Exception as e:
        logger.error(f"Error generating QR code: {e}")
        return jsonify({'error': 'Failed to generate QR code'}), 500

@app.route('/admin/qr_codes')
def admin_qr_codes():
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ QR-–∫–æ–¥–æ–≤"""
    return render_template('admin_qr.html')

@app.route('/api/rooms')
def get_rooms():
    """API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–º–µ—â–µ–Ω–∏–π"""
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑ –ë–î
    # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    rooms = []
    for i in range(1, 101):  # 100 –ø–æ–º–µ—â–µ–Ω–∏–π
        rooms.append({
            'number': i,
            'building': 'A' if i <= 50 else 'B',
            'floor': str((i - 1) // 10 + 1).zfill(2),
            'type': 'WC' if i % 3 == 0 else 'OFFICE',
            'name': config.ROOM_TYPES.get('WC' if i % 3 == 0 else 'OFFICE')
        })
    
    return jsonify(rooms)

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)