#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –±–æ—Ç–∞
–ü–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—É—á–∏—Ç—å chat_id –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞
"""

import requests
import json
import os
from dotenv import load_dotenv

load_dotenv()

def get_bot_info(token):
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    url = f"https://api.telegram.org/bot{token}/getMe"
    response = requests.get(url)
    return response.json()

def get_updates(token):
    """–ü–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (—Å–æ–æ–±—â–µ–Ω–∏—è) –±–æ—Ç–∞"""
    url = f"https://api.telegram.org/bot{token}/getUpdates"
    response = requests.get(url)
    return response.json()

def send_test_message(token, chat_id):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    url = f"https://api.telegram.org/bot{token}/sendMessage"
    data = {
        'chat_id': chat_id,
        'text': 'ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –ø—Ä–æ–±–ª–µ–º!\n\n–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!',
        'parse_mode': 'HTML'
    }
    response = requests.post(url, data=data)
    return response.json()

def main():
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram –±–æ—Ç–∞ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —É—á–µ—Ç–∞ –ø—Ä–æ–±–ª–µ–º")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        token = input("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–∏—Ç–µ —É @BotFather): ").strip()
    
    if not token:
        print("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω!")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞
    print("\n1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–æ—Ç–∞...")
    bot_info = get_bot_info(token)
    
    if not bot_info.get('ok'):
        print(f"‚ùå –û—à–∏–±–∫–∞: {bot_info.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
        return
    
    bot_data = bot_info['result']
    print(f"‚úÖ –ë–æ—Ç –Ω–∞–π–¥–µ–Ω: @{bot_data['username']} ({bot_data['first_name']})")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    print("\n2. –ü–æ–ª—É—á–∞–µ–º chat_id...")
    print("üì± –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É –≤ Telegram, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏—Ç–µ Enter")
    input("–ù–∞–∂–º–∏—Ç–µ Enter –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç—É...")
    
    updates = get_updates(token)
    
    if not updates.get('ok') or not updates.get('result'):
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç—É.")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    chat_ids = set()
    for update in updates['result']:
        if 'message' in update and 'chat' in update['message']:
            chat_id = update['message']['chat']['id']
            chat_type = update['message']['chat']['type']
            chat_title = update['message']['chat'].get('title', '–õ–∏—á–Ω—ã–π —á–∞—Ç')
            chat_ids.add((chat_id, chat_type, chat_title))
    
    if not chat_ids:
        print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π —Å chat_id")
        return
    
    print("\nüìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:")
    for i, (chat_id, chat_type, title) in enumerate(chat_ids, 1):
        print(f"{i}. ID: {chat_id} | –¢–∏–ø: {chat_type} | –ù–∞–∑–≤–∞–Ω–∏–µ: {title}")
    
    # –í—ã–±–∏—Ä–∞–µ–º chat_id
    if len(chat_ids) == 1:
        selected_chat_id = list(chat_ids)[0][0]
        print(f"\n‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω chat_id: {selected_chat_id}")
    else:
        try:
            choice = int(input("\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä —á–∞—Ç–∞: ")) - 1
            selected_chat_id = list(chat_ids)[choice][0]
        except (ValueError, IndexError):
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
    print(f"\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {selected_chat_id}...")
    test_result = send_test_message(token, selected_chat_id)
    
    if test_result.get('ok'):
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
    else:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {test_result.get('description')}")
        return
    
    # –í—ã–≤–æ–¥–∏–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    print("\n" + "=" * 60)
    print("üéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env:")
    print("=" * 60)
    print(f"TELEGRAM_BOT_TOKEN={token}")
    print(f"TELEGRAM_CHAT_ID={selected_chat_id}")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º .env —Ñ–∞–π–ª
    env_file = ".env"
    env_content = []
    
    if os.path.exists(env_file):
        with open(env_file, 'r', encoding='utf-8') as f:
            env_content = f.readlines()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    token_updated = False
    chat_id_updated = False
    
    for i, line in enumerate(env_content):
        if line.startswith('TELEGRAM_BOT_TOKEN='):
            env_content[i] = f"TELEGRAM_BOT_TOKEN={token}\n"
            token_updated = True
        elif line.startswith('TELEGRAM_CHAT_ID='):
            env_content[i] = f"TELEGRAM_CHAT_ID={selected_chat_id}\n"
            chat_id_updated = True
    
    if not token_updated:
        env_content.append(f"TELEGRAM_BOT_TOKEN={token}\n")
    if not chat_id_updated:
        env_content.append(f"TELEGRAM_CHAT_ID={selected_chat_id}\n")
    
    with open(env_file, 'w', encoding='utf-8') as f:
        f.writelines(env_content)
    
    print(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {env_file}")
    
    print("\nüìù –î–∞–ª—å–Ω–µ–π—à–∏–µ —à–∞–≥–∏:")
    print("1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ Google Sheets (–∑–∞–ø—É—Å—Ç–∏—Ç–µ setup_google_sheets.py)")
    print("2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: python app.py")
    print("3. –°–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ QR-–∫–æ–¥—ã: –æ—Ç–∫—Ä–æ–π—Ç–µ /admin/qr_codes")

if __name__ == "__main__":
    main()